#!/usr/bin/bash

TUNDEVICE="tun2"
TUNIPV4RANGE="198.18.0.1/15"
TUNIPV6RANGE="fcfe:dcba:9876:5432:10::/72"
ETHDEV="eth0"
REMOTEIP="1.1.1.1"
REMOTEPORT="1080"
USERNAME="username"
PASSWD="password"
ONLYPROXYCONN=1

BYPASSUSERS=("bypass")
BYPASSIPV4S=("1.1.1.1" "1.0.0.1")
BYPASSIPV6S=("2606:4700:4700::1111" "2606:4700:4700::1001")

DEBUG=0


############################# 如果你不知道你在做什么，请不要修改下述内容 ################################
#########  If you're unsure of what you're doing, refrain from altering the following.  ##########
mainIPv4Addr=$(ip -4 address show | grep $ETHDEV | grep global | grep inet | awk '{print $2}' | cut -d '/' -f1 | head -n 1)
mainIPv6Addr=$(ip -6 address show | grep -A8 $ETHDEV | grep global | awk '{print $2}' | cut -d '/' -f1 | head -n 1)
mainIPv6AddrMask=$(ip -6 address show | grep -A8 $ETHDEV | grep global | awk '{print $2}' | cut -d '/' -f2 | head -n 1)
sshPort=$(ss -tlnp | grep ssh | awk '{print $4}' | awk -F ':' '{print $NF}' | head -n 1)
if [ -z "$mainIPv4Addr" ]; then
    echo -e "FATAL: Can't find a global IPv4 address, please check your network configuration."
    exit 1
fi

if [ -z "$mainIPv6Addr" ]; then
    echo -e "WARNING: Can't find a global IPv6 address. You may meet some unexpected errors :)."
fi
script_path=$(readlink -f "$0")

check_variable() {
    if [[ -z "$1" ]]; then
        echo -e "Error: $2 is not set, please edit $script_path"
        exit 0
    fi
}


start_xgpl() {
    tunDeviceExist=$(ip link show | awk '{print $2}' | grep "$TUNDEVICE" | head -n 1)
    if [ -n "$tunDeviceExist" ]; then
        echo -e "There is already a interface named $TUNDEVICE , please check it or change the TUNDEVICE variable in this script"
        exit 0
    fi

    echo -e "LOG: Starting xgpl..."
    echo -e "LOG: Main IPv4 address: $mainIPv4Addr, Main IPv6 address: $mainIPv6Addr/$mainIPv6AddrMask"
    echo -e "LOG: Creating interface $TUNDEVICE..."
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: Current ip links:\n`ip link list`"
    fi
    ip tuntap add dev $TUNDEVICE mode tun
    ip -4 addr add $TUNIPV4RANGE dev $TUNDEVICE
    ip -6 addr add $TUNIPV6RANGE dev $TUNDEVICE
    ifconfig $TUNDEVICE up

    echo -e "LOG: Setting up routing and iptables rules..."
    # Set up routing
    TunIPv4Addr=$(ip -4 address show dev $TUNDEVICE | grep inet | awk '{print $2}' | cut -d'/' -f1 | head -n 1)
    # TunIPv6Addr=$(ip -6 address show dev $TUNDEVICE | grep inet6 | awk '{print $2}' | cut -d'/' -f1 | head -n 1)  # 看起来没啥用
    
    echo -e "LOG: Flush default table... If an Error is thrown here, it's expected behavior, don't be fuck up."
    # flush default table
    ip -4 route flush table default
    ip -6 route flush table default

    # Set up default routing table
    echo -e "LOG: Setting up default routing table..."
    ip -4 route add default via $TunIPv4Addr dev $TUNDEVICE table default
    ip -6 route add ::/1 dev $TUNDEVICE table default
    
    # Copy the main routing table to the default table
    echo -e "LOG: Copy the main routing table to the default table..."
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: Current IPv4 main routing table:\n`ip -4 route show table main`"
        echo -e "DEBUG: Current IPv6 main routing table:\n`ip -6 route show table main`"
    fi
    ip -4 route show table main | grep -Ev '^default|linkdown' | while read ROUTE ; do
            ip -4 route add table default $ROUTE
    done
    ip -6 route show table main | grep -Ev '^default|linkdown' | while read ROUTE ; do
            ip -6 route add table default $ROUTE
    done

    # Set up route rules
    echo -e "LOG: Setting up route rules..."
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: Current IPv4 routing rules:\n`ip -4 rule list`"
        echo -e "DEBUG: Current IPv6 routing rules:\n`ip -6 rule list`"
    fi
    ip -4 rule add to $REMOTEIP lookup main prio 10000
    ip -4 rule add from $mainIPv4Addr lookup main prio 10001
    ip -4 rule add from all lookup default prio 10002

    if [[ -n "$mainIPv6Addr" && -n "$mainIPv6AddrMask" ]]; then
        ip -6 rule add from $mainIPv6Addr/$mainIPv6AddrMask lookup main prio 10001
    fi
    ip -6 rule add from all lookup default prio 10002
    
    # If a watermarked packet is encountered, It means that the packet needs to be routing to main table. 
    ip -4 rule add fwmark 23333 lookup main
    ip -6 rule add fwmark 23333 lookup main

    # Set up iptables rules
    echo -e "LOG: Setting up iptables rules..."
    # check if ONLYPROXYCONN was set
    if iptables -C OUTPUT ! -d $REMOTEIP -j REJECT > /dev/null; then
        echo -e "LOG: It looks like ONLYPROXYCONN was set to 1 the last time xgpl stopped, delete iptables rules to unblock traffic..."
        if [[ $DEBUG -eq 1 ]]; then
            echo -e "DEBUG: Current iptables rules:\n`iptables -L`"
            echo -e "DEBUG: Current ip6tables rules:\n`ip6tables -L`"
        fi

        ip6tables -D OUTPUT -j REJECT
        ip6tables -D OUTPUT -p tcp --sport $sshPort -j ACCEPT
        for BYPASSIPV6 in ${BYPASSIPV6S[@]}; do
            ip6tables -D OUTPUT -d $BYPASSIPV6 -j ACCEPT
        done

        iptables -D OUTPUT ! -d $REMOTEIP -j REJECT
        iptables -D OUTPUT -p tcp --sport $sshPort -j ACCEPT
        for BYPASSIPV4 in ${BYPASSIPV4S[@]}; do
            iptables -D OUTPUT -d $BYPASSIPV4 -j ACCEPT
        done
    fi

    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: IPv4 mangle table:\n `iptables -t mangle -L`"
        echo -e "DEBUG: IPv6 mangle table:\n `ip6tables -t mangle -L`"

        echo -e "DEBUG: IPv4 nat table:\n `iptables -t nat -L`"
        echo -e "DEBUG: IPv6 nat table:\n `ip6tables -t nat -L`"
    fi

    # add iptables rules
    if ! iptables -t nat -C POSTROUTING -m mark --mark 23333 -j SNAT --to $mainIPv4Addr > /dev/null; then
        iptables -t nat -A POSTROUTING -m mark --mark 23333 -j SNAT --to $mainIPv4Addr
        if [[ -n "$mainIPv6Addr" && -n "$mainIPv6AddrMask" ]]; then
            ip6tables -t nat -A POSTROUTING -m mark --mark 23333 -j SNAT --to $mainIPv6Addr
        fi
    fi

    for BYPASSUSER in ${BYPASSUSERS[@]}; do
        if ! iptables -t mangle -C OUTPUT -m owner --uid-owner $BYPASSUSER -j MARK --set-mark 23333 > /dev/null; then
            iptables -t mangle -A OUTPUT -m owner --uid-owner $BYPASSUSER -j MARK --set-mark 23333
            ip6tables -t mangle -A OUTPUT -m owner --uid-owner $BYPASSUSER -j MARK --set-mark 23333
        fi
    done

    for BYPASSIPV4 in ${BYPASSIPV4S[@]}; do
        if ! iptables -t mangle -C OUTPUT -d $BYPASSIPV4 -j MARK --set-mark 23333 > /dev/null; then
            iptables -t mangle -A OUTPUT -d $BYPASSIPV4 -j MARK --set-mark 23333
        fi
    done

    for BYPASSIPV6 in ${BYPASSIPV6S[@]}; do
        if ! iptables -t mangle -C OUTPUT -d $BYPASSIPV6 -j MARK --set-mark 23333 > /dev/null; then
            ip6tables -t mangle -A OUTPUT -d $BYPASSIPV6 -j MARK --set-mark 23333
        fi
    done

    echo -e "LOG: Starting tun2socks..."
    nohup /usr/local/bin/tun2socks -proxy socks5://$USERNAME:$PASSWD@$REMOTEIP:$REMOTEPORT -device "$TUNDEVICE" >> /var/log/tun2sockt.log &
    echo -e "LOG: xgpl started"
}


stop_xgpl(){
    tunDeviceExist=$(ip link show | awk '{print $2}' | grep "$TUNDEVICE" | head -n 1)
    if [ -z "$tunDeviceExist" ]; then
        echo -e "There is no interface named $TUNDEVICE, looks like xgpl is not running."
        exit 0
    fi

    echo -e "LOG: Killall tun2socks..."
    killall /usr/local/bin/tun2socks

    echo -e "LOG: Flushing iptables rules..."
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: Current mangle iptables rules:\n`iptables -t mangle -L`"
        echo -e "DEBUG: Current magle ip6tables rules:\n`ip6tables -t mangle -L`"

        echo -e "DEBUG: Current nat iptables rules:\n`iptables -t nat -L`"
        echo -e "DEBUG: Current nat ip6tables rules:\n`ip6tables -t nat -L`"
    fi

    for BYPASSIPV6 in ${BYPASSIPV6S[@]}; do
        ip6tables -t mangle -D OUTPUT -d $BYPASSIPV6 -j MARK --set-mark 23333
    done
    
    for BYPASSIPV4 in ${BYPASSIPV4S[@]}; do
        iptables -t mangle -D OUTPUT -d $BYPASSIPV4 -j MARK --set-mark 23333
    done

    for BYPASSUSER in ${BYPASSUSERS[@]}; do
        iptables -t mangle -D OUTPUT -m owner --uid-owner $BYPASSUSER -j MARK --set-mark 23333
        ip6tables -t mangle -D OUTPUT -m owner --uid-owner $BYPASSUSER -j MARK --set-mark 23333
    done

    iptables -t nat -D POSTROUTING -m mark --mark 23333 -j SNAT --to $mainIPv4Addr
    if [[ -n "$mainIPv6Addr" && -n "$mainIPv6AddrMask" ]]; then
        ip6tables -t nat -D POSTROUTING -m mark --mark 23333 -j SNAT --to $mainIPv6Addr
    fi

    echo -e "LOG: Flushing routing rules..."
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: Current IPv4 routing rules:\n`ip -4 rule list`"
        echo -e "DEBUG: Current IPv6 routing rules:\n`ip -6 rule list`"
    fi

    ip -4 rule del fwmark 23333 lookup main
    ip -6 rule del fwmark 23333 lookup main

    ip -6 rule del prio 10002
    if [[ -n "$mainIPv6Addr" && -n "$mainIPv6AddrMask" ]]; then
        ip -6 rule del prio 10001
    fi

    ip -4 rule del prio 10002
    ip -4 rule del prio 10001
    ip -4 rule del prio 10000

    echo -e "LOG: Flushing routing tables..."
    if [[ $DEBUG -eq 1 ]]; then
        echo -e "DEBUG: Current IPv4 routing table:\n`ip -4 route show table default`"
        echo -e "DEBUG: Current IPv6 routing table:\n`ip -6 route show table default`"
    fi

    ip -4 route flush table default
    ip -6 route flush table default

    echo -e "LOG: Deleting interface $TUNDEVICE..."
    ifconfig $TUNDEVICE down
    ip tuntap del dev $TUNDEVICE mode tun

    if [ $ONLYPROXYCONN -eq 1 ]; then
        echo -e "LOG: ONLYPROXYCONN set to 1, add iptables rules to block traffic..."
        if [[ $DEBUG -eq 1 ]]; then
            echo -e "DEBUG: Current iptables rules:\n`iptables -L`"
            echo -e "DEBUG: Current ip6tables rules:\n `ip6tables -L`"
        fi

        for BYPASSIPV4 in ${BYPASSIPV4S[@]}; do
            iptables -I OUTPUT 1 -d $BYPASSIPV4 -j ACCEPT
        done
        iptables -I OUTPUT 1 -p tcp --sport $sshPort -j ACCEPT
        iptables -A OUTPUT ! -d $REMOTEIP -j REJECT

        for BYPASSIPV6 in ${BYPASSIPV6S[@]}; do
            ip6tables -I OUTPUT 1 -d $BYPASSIPV6 -j ACCEPT
        done
        ip6tables -I OUTPUT 1 -p tcp --sport $sshPort -j ACCEPT
        ip6tables -A OUTPUT -j REJECT
    fi
}

restart_xgpl(){
    stop_xgpl
    start_xgpl
}


if [ "$EUID" -ne 0 ]; then
    echo -e "Please run as root"
    exit 1
fi

check_variable "$TUNDEVICE" "TUNDEVICE"
check_variable "$TUNIPV4RANGE" "TUNIPV4RANGE"
check_variable "$TUNIPV6RANGE" "TUNIPV6RANGE"
check_variable "$ETHDEV" "ETHDEV"
check_variable "$REMOTEIP" "REMOTEIP"
check_variable "$REMOTEPORT" "REMOTEPORT"
check_variable "$USERNAME" "USERNAME"
check_variable "$PASSWD" "PASSWD"
check_variable "$ONLYPROXYCONN" "ONLYPROXYCONN"

check_variable "${BYPASSUSERS[0]}" "BYPASSUSERS"
check_variable "${BYPASSIPV4S[0]}" "BYPASSIPV4S"
check_variable "${BYPASSIPV6S[0]}" "BYPASSIPV6S"



if [[ "$*" == *"--debug"* ]]; then
    DEBUG=1
fi

case "$1" in
    start)
        start_xgpl
        ;;
    stop)
        stop_xgpl
        ;;
    restart)
        restart_xgpl
        ;;
    *)
        echo -e "Usage: $0 {start|stop|restart}"
        exit 1
        ;;
esac


exit 0